CREATE TABLE IF NOT EXISTS "roles" (
    role_id INTEGER PRIMARY KEY AUTOINCREMENT,
    role_name TEXT NOT NULL UNIQUE,
    description TEXT
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE IF NOT EXISTS "specialties" (
    specialty_id INTEGER PRIMARY KEY AUTOINCREMENT,
    specialty_name TEXT NOT NULL UNIQUE
);
CREATE TABLE IF NOT EXISTS "regions" (
    region_id INTEGER PRIMARY KEY AUTOINCREMENT,
    region_name TEXT NOT NULL,
    zip_code TEXT,
    city TEXT,
    state TEXT,
    county TEXT,
    status TEXT NOT NULL,
    created_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "user_roles" (
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    is_primary BOOLEAN DEFAULT 0,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES "users"(user_id),
    FOREIGN KEY (role_id) REFERENCES "roles"(role_id)
);
CREATE TABLE IF NOT EXISTS "region_providers" (
    region_id INTEGER NOT NULL,
    provider_id INTEGER NOT NULL,
    PRIMARY KEY (region_id, provider_id),
    FOREIGN KEY (region_id) REFERENCES "regions"(region_id),
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id)
);
CREATE TABLE IF NOT EXISTS "provider_specialties" (
    provider_id INTEGER NOT NULL,
    specialty_id INTEGER NOT NULL,
    PRIMARY KEY (provider_id, specialty_id),
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id),
    FOREIGN KEY (specialty_id) REFERENCES "specialties"(specialty_id)
);
CREATE TABLE IF NOT EXISTS "patient_assignments" (
    assignment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    patient_id INTEGER NOT NULL,
    provider_id INTEGER NOT NULL,
    coordinator_id INTEGER NOT NULL,
    assignment_date TEXT,
    assignment_type TEXT,
    status TEXT,
    priority_level TEXT,
    notes TEXT,
    created_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by INTEGER,
    updated_by INTEGER, initial_tv_provider_id INTEGER, recommended_provider_id INTEGER,
    FOREIGN KEY (patient_id) REFERENCES "patients"(patient_id),
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id),
    FOREIGN KEY (coordinator_id) REFERENCES "coordinators"(coordinator_id),
    FOREIGN KEY (created_by) REFERENCES "users"(user_id),
    FOREIGN KEY (updated_by) REFERENCES "users"(user_id)
);
CREATE TABLE IF NOT EXISTS "insurance_eligibility_records" (
    record_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id INTEGER UNIQUE NOT NULL,
    eligibility_status TEXT NOT NULL,
    coverage_start_date TEXT,
    coverage_end_date TEXT,
    confirmation_number TEXT,
    notes TEXT,
    checked_on_date TEXT NOT NULL,
    FOREIGN KEY (task_id) REFERENCES "prod_tasks_backup"(task_id)
);
CREATE TABLE IF NOT EXISTS "SOURCE_PATIENT_DATA" (
	"Pt Status"	TEXT,
	"Pt Name"	TEXT,
	"LAST FIRST DOB"	TEXT,
	"Last"	TEXT,
	"First"	TEXT,
	"DOB"	TEXT,
	"Contact Name"	TEXT,
	"Phone"	TEXT,
	"Street"	TEXT,
	"City"	TEXT,
	"State"	TEXT,
	"Zip"	TEXT,
	"Fac"	TEXT,
	"Rep(s)"	TEXT,
	"Ins1"	TEXT,
	"Policy"	TEXT,
	"Region"	TEXT,
	"Initial TV Prov"	TEXT,
	"Recommended Reg Prov"	TEXT,
	"Assigned Reg Prov"	TEXT,
	"Assigned CM"	TEXT,
	"BCD Correct Name"	TEXT,
	"Row"	REAL,
	"Trigger"	REAL,
	"Status"	TEXT,
	"List"	TEXT,
	"eMed Chart Created Y/N"	TEXT,
	"Trigger.1"	REAL,
	"Status.1"	TEXT,
	"List.1"	TEXT,
	"Prescreen Call Notes"	TEXT,
	"eMed Intake Form Y/N"	TEXT,
	"Initial TV Date"	TEXT,
	"Trigger.2"	REAL,
	"Status.2"	TEXT,
	"List.2"	TEXT,
	"eMed Records Routing Notes"	TEXT,
	"Trigger.3"	REAL,
	"Status.3"	TEXT,
	"List.3"	TEXT,
	"Initial TV Notes"	TEXT,
	"TV Note"	TEXT,
	"CM Notified"	TEXT,
	"Trigger.4"	REAL,
	"Status.4"	TEXT,
	"List.4"	TEXT,
	"Schedule HV 2w Notes"	TEXT,
	"Initial HV Date"	TEXT,
	"Trigger.5"	REAL,
	"List.5"	TEXT,
	"General Notes"	TEXT,
	"Next Visit"	TEXT,
	"Previous Visit 1"	TEXT
);
CREATE TABLE IF NOT EXISTS "users" (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    phone TEXT,
    status TEXT NOT NULL,
    hire_date TEXT,
    termination_date TEXT,
    max_patients INTEGER,
    performance_rating REAL,
    created_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP
, full_name TEXT, password TEXT DEFAULT 'pass123', username TEXT, last_login TEXT);
CREATE TABLE IF NOT EXISTS "SOURCE_STAFF_INFO" (
"First NAme [Required]" TEXT,
  "Last NAme [Required]" TEXT,
  "Email Address [Required]" TEXT,
  "Status [READ ONLY]" TEXT,
  "Primary ROLE" TEXT,
  "Description" TEXT,
  "Secondary Role" TEXT,
  "Description.1" TEXT
);
CREATE TABLE IF NOT EXISTS "providers" (
    provider_id INTEGER PRIMARY KEY,
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    FOREIGN KEY (user_id) REFERENCES "users"(user_id),
    FOREIGN KEY (role_id) REFERENCES "roles"(role_id)
);
CREATE TABLE IF NOT EXISTS "coordinators" (
    coordinator_id INTEGER PRIMARY KEY,
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    FOREIGN KEY (user_id) REFERENCES "users"(user_id),
    FOREIGN KEY (role_id) REFERENCES "roles"(role_id)
);
CREATE TABLE IF NOT EXISTS "facilities" (
	"facility_id"	INTEGER,
	"facility_name"	TEXT NOT NULL UNIQUE,
	PRIMARY KEY("facility_id" AUTOINCREMENT)
);
CREATE TABLE IF NOT EXISTS "provider_zip_codes" (
    assignment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    provider_id INTEGER NOT NULL,
    zip_code TEXT NOT NULL,
    region_name TEXT,
    priority_level INTEGER DEFAULT 1,
    telehealth_available BOOLEAN DEFAULT TRUE,
    created_date TEXT NOT NULL DEFAULT (datetime('now'))
);
CREATE TABLE IF NOT EXISTS "task_billing_codes" (
    code_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_description TEXT,
    service_type TEXT,
    location_type TEXT,
    patient_type TEXT,
    min_minutes INTEGER,
    max_minutes INTEGER,
    billing_code TEXT NOT NULL,
    description TEXT,
    rate DECIMAL(10,2),
    effective_date TEXT NOT NULL,
    expiration_date TEXT,
    created_date TEXT NOT NULL DEFAULT (datetime('now'))
);
CREATE TABLE staff_code_mapping (
    staff_code TEXT PRIMARY KEY,
    user_id INTEGER,
    confidence_level TEXT CHECK (confidence_level IN ('HIGH', 'MEDIUM', 'LOW', 'UNMATCHED')),
    mapping_type TEXT CHECK (mapping_type IN ('PROVIDER', 'COORDINATOR', 'SPECIAL_CASE')),
    notes TEXT,
    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES "users"(user_id)
);
CREATE TABLE unmatched_patient_names (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    source_table TEXT NOT NULL,
    patient_name TEXT NOT NULL,
    occurrence_count INTEGER DEFAULT 1,
    first_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_seen DATETIME DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE sqlite_stat1(tbl,idx,stat);
CREATE TABLE unmatched_tasks_analysis (
    unmatched_id INTEGER PRIMARY KEY AUTOINCREMENT,
    source_table TEXT NOT NULL,
    patient_name_raw TEXT,
    patient_name_cleaned TEXT,
    staff_name TEXT,
    staff_type TEXT, -- 'coordinator' or 'provider'
    task_date TEXT,
    task_type TEXT,
    service_code TEXT,
    notes TEXT,
    reason_unmatched TEXT, -- 'missing_patient', 'missing_staff', 'invalid_data'
    provider_info TEXT, -- Additional provider details for reporting
    coordinator_info TEXT, -- Additional coordinator details for reporting
    created_date TEXT DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "patients_backup"(
  patient_id INT,
  region_id INT,
  first_name TEXT,
  last_name TEXT,
  date_of_birth TEXT,
  gender TEXT,
  phone_primary TEXT,
  phone_secondary TEXT,
  email TEXT,
  address_street TEXT,
  address_city TEXT,
  address_state TEXT,
  address_zip TEXT,
  emergency_contact_name TEXT,
  emergency_contact_phone TEXT,
  emergency_contact_relationship TEXT,
  insurance_primary TEXT,
  insurance_policy_number TEXT,
  insurance_secondary TEXT,
  medical_record_number TEXT,
  status TEXT,
  enrollment_date TEXT,
  discharge_date TEXT,
  notes TEXT,
  created_date TEXT,
  updated_date TEXT,
  created_by INT,
  updated_by INT,
  current_facility_id INT,
  hypertension INT,
  mental_health_concerns INT,
  dementia INT,
  last_annual_wellness_visit TEXT,
  last_first_dob TEXT
);
CREATE TABLE IF NOT EXISTS "patients"(
  patient_id INT,
  region_id INT,
  first_name TEXT,
  last_name TEXT,
  date_of_birth TEXT,
  gender TEXT,
  phone_primary TEXT,
  phone_secondary TEXT,
  email TEXT,
  address_street TEXT,
  address_city TEXT,
  address_state TEXT,
  address_zip TEXT,
  emergency_contact_name TEXT,
  emergency_contact_phone TEXT,
  emergency_contact_relationship TEXT,
  insurance_primary TEXT,
  insurance_policy_number TEXT,
  insurance_secondary TEXT,
  medical_record_number TEXT,
  status TEXT,
  enrollment_date TEXT,
  discharge_date TEXT,
  notes TEXT,
  created_date TEXT,
  updated_date TEXT,
  created_by INT,
  updated_by INT,
  current_facility_id INT,
  hypertension INT,
  mental_health_concerns INT,
  dementia INT,
  last_annual_wellness_visit TEXT,
  last_first_dob TEXT
);
CREATE INDEX idx_provider_zip_codes_provider ON "provider_zip_codes"(provider_id);
CREATE INDEX idx_provider_zip_codes_zip ON "provider_zip_codes"(zip_code);
CREATE INDEX idx_users_email ON "users"(email);
CREATE INDEX idx_providers_user ON "providers"(user_id);
CREATE INDEX idx_coordinators_user ON "coordinators"(user_id);
CREATE INDEX idx_staff_code_mapping_code ON staff_code_mapping(staff_code);
CREATE INDEX idx_staff_code_mapping_user_id ON staff_code_mapping(user_id);
CREATE INDEX idx_prod_patient_assignments_patient_id ON "patient_assignments"(patient_id);
CREATE INDEX idx_prod_coordinators_coordinator_id ON "coordinators"(coordinator_id);
CREATE INDEX idx_unmatched_patient_names_source ON unmatched_patient_names(source_table);
CREATE INDEX idx_unmatched_patient_names_name ON unmatched_patient_names(patient_name);
CREATE INDEX idx_unmatched_source ON unmatched_patient_names(source_table);
CREATE INDEX idx_unmatched_name ON unmatched_patient_names(patient_name);
CREATE INDEX idx_prod_task_billing_codes_lookup 
ON "task_billing_codes" (billing_code, rate);
CREATE TRIGGER update_users_timestamp 
    AFTER UPDATE ON "users"
    BEGIN
        UPDATE "users" SET updated_date = datetime('now') WHERE user_id = NEW.user_id;
    END;
CREATE TRIGGER update_providers_timestamp 
    AFTER UPDATE ON "providers"
    BEGIN
        UPDATE "providers" SET updated_date = datetime('now') WHERE provider_id = NEW.provider_id;
    END;
CREATE TRIGGER update_coordinators_timestamp 
    AFTER UPDATE ON "coordinators"
    BEGIN
        UPDATE "coordinators" SET updated_date = datetime('now') WHERE coordinator_id = NEW.coordinator_id;
    END;
CREATE TABLE SOURCE_PROVIDER_REGION_COVERAGE(
  "ZEN LIST OF PROVIDERS" TEXT,
  UNASSIGNED TEXT,
  Malhotra TEXT,
  Andrew TEXT,
  Ethel TEXT,
  Albert TEXT,
  Lourdes TEXT,
  Anisha TEXT,
  Jaspreet TEXT,
  Genevieive REAL,
  "Unnamed: 10" TEXT,
  Eden REAL,
  Ugochi REAL,
  "Unnamed: 13" TEXT,
  Angela TEXT,
  "Unnamed: 15" TEXT
);
CREATE TABLE SOURCE_REGION_ZIP_CODES(
  Region TEXT,
  City TEXT,
  "ZIP Codes" TEXT,
  "Unnamed: 3" TEXT,
  "Region.1" TEXT,
  "City.1" TEXT,
  "ZIP Codes.1" TEXT,
  "Unnamed: 7" TEXT,
  "Region.2" TEXT,
  "City.2" TEXT,
  "ZIP Codes.2" TEXT,
  "Unnamed: 11" TEXT,
  "Region.3" TEXT,
  "City.3" TEXT,
  "ZIP Codes.3" TEXT,
  "SCC LIST OF PROVIDERS" TEXT,
  UNASSIGNED TEXT,
  Malhotra TEXT,
  Anisha TEXT,
  Ethel TEXT,
  "Unnamed: 14" TEXT,
  "Unnamed: 15" TEXT,
  "Region.4" TEXT,
  "City.4" TEXT,
  "ZIP Codes.4" TEXT
);
CREATE TABLE SOURCE_TASKS_AND_CODES(
  tasks TEXT,
  "Code(s)" TEXT,
  role TEXT
);
CREATE TABLE SOURCE_PROVIDER_TASKS_HISTORY_temp_new ("1" INT, "Prov" TEXT, "Coding" TEXT, "Billed Date 
Notes" REAL, "Patient Last, First DOB" TEXT, "DOS" TEXT, "Service" TEXT, "Minutes" TEXT, "Hospice" TEXT, "Paid by
Patient" REAL, "Notes" TEXT, "WC Size 
(sqcm)" TEXT, "WC Diagnosis (HH-OK to free type)" TEXT, "Graft Info" TEXT, "Wound#" REAL, "Session#" REAL, "Multiple
Grafts" TEXT, "EHR
Check Status" TEXT, "EHR 
Chief Complaint" TEXT, "EHR
Assessment Dx" TEXT, "EHR
AMC Staff Initials" TEXT, "EHR
Note Filename" TEXT, "EHR
AMC Note Status" TEXT, "EHR
Notes" TEXT, "Check Patient Dropdown" TEXT, "Billing Status" TEXT, "Patient Last, First DOB.1" TEXT, "Case Pers
Description" TEXT, "Case Misc
Local Use B" REAL, "ChargeLine
DOS" TEXT, "ChargeLine
RendProv$" TEXT, "ChargeLine
Procedure(s)" TEXT, "ChargeLine
Modifier(s)" TEXT, "ChargeLine
Units" REAL, "ChargeLine
Amount" REAL, "ChargeLine
Total" REAL, "ChargeLine
Prov" TEXT, "ChargeLine
POS" REAL, "ChargeLine
Fac" TEXT, "ChargeLine
WC Dx" TEXT, "ChargeLine
Primary Dx" TEXT, "ChargeLine
Dx(s)" TEXT, "Claim#" REAL, "Date Billed" REAL, "Notes.1" TEXT, "Billed
Amount" REAL, "CL Prov
Override" TEXT, "CL Prov
Manual" REAL);
CREATE TABLE SOURCE_PROVIDER_TASKS_HISTORY (

	"1" INT,

	Prov TEXT,

	Coding TEXT,

	"Billed Date 
Notes" REAL,

	"Patient Last, First DOB" TEXT,

	DOS TEXT,

	Service TEXT,

	Minutes TEXT,

	Hospice TEXT,

	"Paid by
Patient" REAL,

	Notes TEXT,

	"WC Size 
(sqcm)" TEXT,

	"WC Diagnosis (HH-OK to free type)" TEXT,

	"Graft Info" TEXT,

	"Wound#" REAL,

	"Session#" REAL,

	"Multiple
Grafts" TEXT,

	"EHR Check Status" TEXT,

	"EHR Chief Complaint" TEXT,

	"EHR Assessment Dx" TEXT,

	"EHR
AMC Staff Initials" TEXT,

	"EHR
Note Filename" TEXT,

	"EHR
AMC Note Status" TEXT,

	"EHR
Notes" TEXT,

	"Check Patient Dropdown" TEXT,

	"Billing Status" TEXT,

	"Patient Last, First DOB.1" TEXT,

	"Case Pers
Description" TEXT,

	"Case Misc
Local Use B" REAL,

	"ChargeLine
DOS" TEXT,

	"ChargeLine
RendProv$" TEXT,

	"ChargeLine
Procedure(s)" TEXT,

	"ChargeLine
Modifier(s)" TEXT,

	"ChargeLine
Units" REAL,

	"ChargeLine
Amount" REAL,

	"ChargeLine
Total" REAL,

	"ChargeLine
Prov" TEXT,

	"ChargeLine
POS" REAL,

	"ChargeLine
Fac" TEXT,

	"ChargeLine
WC Dx" TEXT,

	"ChargeLine
Primary Dx" TEXT,

	"ChargeLine
Dx(s)" TEXT,

	"Claim#" REAL,

	"Date Billed" REAL,

	"Notes.1" TEXT,

	"Billed
Amount" REAL,

	"CL Prov
Override" TEXT,

	"CL Prov
Manual" REAL

);
CREATE TABLE IF NOT EXISTS "SOURCE_COORDINATOR_TASKS_HISTORY" (
"Staff" TEXT,
  "Pt Name" TEXT,
  "Type" TEXT,
  "Date Only" TEXT,
  "Notes" TEXT,
  "Start Time B" TEXT,
  "Stop Time B" TEXT,
  "Mins B" REAL,
  "Current" TEXT,
  "NotZEN" TEXT,
  "Invalid Date/Time" TEXT,
  "Invalid Patient Dropdown" TEXT,
  "Start Time A" TEXT,
  "Stop Time A" TEXT
);
CREATE TABLE workflow_templates (
    template_id INTEGER PRIMARY KEY AUTOINCREMENT,
    template_name TEXT NOT NULL UNIQUE
);
CREATE TABLE workflow_steps (
    step_id INTEGER PRIMARY KEY AUTOINCREMENT,
    template_id INTEGER NOT NULL,
    step_order INTEGER NOT NULL,
    task_name TEXT NOT NULL,
    owner TEXT,
    deliverable TEXT,
    cycle_time TEXT,
    FOREIGN KEY (template_id) REFERENCES workflow_templates(template_id)
);
CREATE TABLE workflow_instances (
    instance_id INTEGER PRIMARY KEY AUTOINCREMENT,
    template_id INTEGER NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (template_id) REFERENCES workflow_templates(template_id)
);
CREATE TABLE IF NOT EXISTS "tasks_old" (
    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    patient_name TEXT,
    patient_id TEXT,
    user_id TEXT,
    full_name TEXT,
    staff_code TEXT,
    role_id INTEGER,
    task_date TEXT,
    start_time TEXT,
    stop_time TEXT,
    task_type TEXT,
    duration_minutes INTEGER,
    service_code TEXT,
    notes TEXT,
    task_state TEXT
);
CREATE TABLE temp_prod_provider_tasks (
    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    patient_name TEXT,
    patient_id TEXT,
    user_id TEXT,
    full_name TEXT,
    staff_code TEXT,
    role_id INTEGER,
    task_date TEXT,
    start_time TEXT,
    stop_time TEXT,
    task_type TEXT,
    duration_minutes INTEGER,
    service_code TEXT,
    notes TEXT,
    task_state TEXT
);
CREATE TABLE IF NOT EXISTS "tasks"(
  task_id INT,
  patient_name TEXT,
  patient_id TEXT,
  user_id TEXT,
  full_name TEXT,
  staff_code TEXT,
  role_id INT,
  task_date TEXT,
  start_time TEXT,
  stop_time TEXT,
  task_type TEXT,
  duration_minutes INT,
  service_code TEXT,
  notes TEXT,
  task_state TEXT);
CREATE TABLE coordinator_billing_codes (
    code_id INTEGER PRIMARY KEY AUTOINCREMENT,
    billing_code TEXT UNIQUE NOT NULL,
    description TEXT,
    min_minutes INTEGER,
    max_minutes INTEGER
);
CREATE TABLE IF NOT EXISTS "task_definitions" (
    task_definition_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_category TEXT NOT NULL,
    task_description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trigger_prod_task_definitions_updated_at
AFTER UPDATE ON "task_definitions"
FOR EACH ROW
BEGIN
    UPDATE "task_definitions"
    SET updated_at = CURRENT_TIMESTAMP
    WHERE task_definition_id = OLD.task_definition_id;
END;

CREATE TABLE IF NOT EXISTS "coordinator_task_definitions" (
    task_definition_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_category TEXT NOT NULL,
    task_description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trigger_prod_coordinator_task_definitions_updated_at
AFTER UPDATE ON "coordinator_task_definitions"
FOR EACH ROW
BEGIN
    UPDATE "coordinator_task_definitions"
    SET updated_at = CURRENT_TIMESTAMP
    WHERE task_definition_id = OLD.task_definition_id;
END;
CREATE TABLE IF NOT EXISTS "daily_tasks" (
    daily_task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_description TEXT,
    service_type TEXT,
    description TEXT,
    coordinator_id INTEGER,
    patient_id INTEGER,
    task_date DATE,
    duration_minutes INTEGER,
    notes TEXT,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "coordinator_tasks" (
    coordinator_task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id INTEGER, -- Foreign key to tasks table (may be dropped)
    patient_id INTEGER, -- Derived from matching pt_name from SOURCE_COORDINATOR_TASKS_HISTORY to last_first_dob in patients table, if no match then keep pt_name as patient_id for update later
    patient_name TEXT, -- From pt_name column in SOURCE_COORDINATOR_TASKS_HISTORY table
    coordinator_id INTEGER, -- Derived from staff_code_mapping to user_id using staff_code_mapping table to coordinators table for coordinator_id, if user_id is null then use staff_code
    user_id INTEGER, -- Derived from staff_code_mapping to user_id using staff_code_mapping table, if user_id is null then use staff_code
    coordinator_name TEXT, -- Derived from staff_code_mapping to user_id using staff_code_mapping table then user_id to full_name from users table, if user_id is null then use staff_code
    task_date TEXT, -- Date the task was performed - date_only column from SOURCE_COORDINATOR_TASKS_HISTORY table
    duration_minutes INTEGER, -- Duration in minutes - Mins B column from SOURCE_COORDINATOR_TASKS_HISTORY table
    task_type TEXT, -- Type of task - type column from SOURCE_COORDINATOR_TASKS_HISTORY table
    notes TEXT, -- Task notes - notes column from SOURCE_COORDINATOR_TASKS_HISTORY
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (patient_id) REFERENCES "patients"(patient_id),
    FOREIGN KEY (coordinator_id) REFERENCES "coordinators"(coordinator_id),
    FOREIGN KEY (user_id) REFERENCES "users"(user_id)
);
CREATE TABLE coordinator_monthly_summary (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    coordinator_id INTEGER NOT NULL, -- Derived from coordinator_id in coordinator_tasks
    coordinator_name TEXT, -- Derived from user full name in users via coordinator_id -> role_id -> user_id
    patient_id INTEGER NOT NULL, -- From coordinator_tasks (derived from patient_id)
    patient_name TEXT, -- From coordinator_tasks (derived from patient_name)
    year INTEGER NOT NULL, -- Derived from task_date in coordinator_tasks (extracted as integer from date string)
    month INTEGER NOT NULL, -- Derived from task_date in coordinator_tasks (extracted as integer from date string)
    total_minutes INTEGER NOT NULL, -- Sum of duration_minutes from coordinator_tasks partitioned by year, month, coordinator_id, patient_id
    billing_code_id INTEGER, -- Assigned from coordinator_billing_codes where total_minutes falls between min and max (up to 70 minutes)
    billing_code TEXT, -- Corresponds to billing_code_id
    billing_code_description TEXT, -- Corresponds to billing_code_id
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (coordinator_id) REFERENCES "coordinators"(coordinator_id),
    FOREIGN KEY (patient_id) REFERENCES "patients"(patient_id),
    FOREIGN KEY (billing_code_id) REFERENCES coordinator_billing_codes(code_id)
);
CREATE TABLE IF NOT EXISTS "provider_tasks" (
    provider_task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id INTEGER, -- Foreign key to tasks table (left blank initially)
    provider_id INTEGER NOT NULL, -- Derived from staff_code_mapping to user_id using staff_code_mapping table to providers table for provider_id, if user_id is null then use staff_code
    provider_name TEXT, -- Derived from user full name in users via provider_id -> role_id -> user_id
    patient_name TEXT, -- From Patient Last, First DOB from SOURCE_PROVIDER_TASKS_HISTORY table
    user_id INTEGER NOT NULL, -- Derived from staff_code_mapping to user_id using staff_code_mapping table, if user_id is null then use staff_code
    patient_id INTEGER, -- Derived from matching Patient Last, First DOB from SOURCE_PROVIDER_TASKS_HISTORY to last_first_dob in the patients table, if no match then keep Patient Last, First DOB as patient_id for update later
    status TEXT, -- Set as 'completed'
    notes TEXT, -- Concatenated from EHR Chief Complaint and EHR Assessment Dx from SOURCE_PROVIDER_TASKS_HISTORY
    minutes_of_service INTEGER, -- Derived from Minutes from SOURCE_PROVIDER_TASKS_HISTORY
    billing_code_id INTEGER, -- Derived from code_id in task_billing_codes by mapping service_code in SOURCE_PROVIDER_TASKS_HISTORY to billing_code in task_billing_codes
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    task_date TEXT, -- Derived from DOS from SOURCE_PROVIDER_TASKS_HISTORY
    month INTEGER, -- Derived from DOS, month from SOURCE_PROVIDER_TASKS_HISTORY
    year INTEGER, -- Derived from DOS, year from SOURCE_PROVIDER_TASKS_HISTORY
    billing_code TEXT, -- Service_code in SOURCE_PROVIDER_TASKS_HISTORY
    billing_code_description TEXT, -- Derived from task_description in task_billing_codes by mapping service_code in SOURCE_PROVIDER_TASKS_HISTORY to billing_code in task_billing_codes
    FOREIGN KEY (task_id) REFERENCES "tasks"(task_id),
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id),
    FOREIGN KEY (patient_id) REFERENCES "patients"(patient_id),
    FOREIGN KEY (billing_code_id) REFERENCES "task_billing_codes"(code_id)
);
CREATE INDEX idx_prod_provider_tasks_provider_id ON "provider_tasks"(provider_id);
CREATE INDEX idx_prod_provider_tasks_patient_id ON "provider_tasks"(patient_id);
CREATE INDEX idx_prod_provider_tasks_assigned_date ON "provider_tasks"(assigned_date);
CREATE TABLE IF NOT EXISTS "provider_monthly_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    provider_id INTEGER NOT NULL, -- Derived from provider_tasks table via provider_id
    provider_name TEXT NOT NULL, -- Derived from user full name in users via provider_id -> role_id -> user_id
    month INTEGER NOT NULL, -- Derived from task_date in provider_tasks (extracted as integer from DOS field)
    year INTEGER NOT NULL, -- Derived from task_date in provider_tasks (extracted as integer from DOS field)
    total_tasks_completed INTEGER DEFAULT 0, -- Sum of tasks per provider per month from provider_tasks
    total_time_spent_minutes INTEGER DEFAULT 0, -- Sum of minutes_of_service per provider per month from provider_tasks
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id)
);

CREATE TABLE IF NOT EXISTS "provider_weekly_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    provider_id INTEGER NOT NULL, -- Derived from provider_tasks table via provider_id
    provider_name TEXT NOT NULL, -- Derived from user full name in users via provider_id -> role_id -> user_id
    week_start_date TEXT NOT NULL, -- Start date of the week (Monday) derived from task_date in provider_tasks
    week_end_date TEXT NOT NULL, -- End date of the week (Friday) derived from task_date in provider_tasks
    year INTEGER NOT NULL, -- Year derived from task_date in provider_tasks
    week_number INTEGER NOT NULL, -- Week number of the year derived from task_date in provider_tasks
    total_tasks_completed INTEGER DEFAULT 0, -- Sum of tasks per provider per week (weekdays only) from provider_tasks
    total_time_spent_minutes INTEGER DEFAULT 0, -- Sum of minutes_of_service per provider per week (weekdays only) from provider_tasks
    average_daily_minutes REAL DEFAULT 0.0, -- Average minutes spent per day (weekdays only)
    days_active INTEGER DEFAULT 0, -- Number of weekdays with tasks completed
    paid BOOLEAN DEFAULT FALSE, -- Payment status that can be modified by admin
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id)
);
CREATE TABLE IF NOT EXISTS "user_patient_assignments" (user_id INTEGER NOT NULL, patient_id INTEGER NOT NULL, role_id INTEGER NOT NULL, PRIMARY KEY (user_id, patient_id, role_id), FOREIGN KEY (user_id) REFERENCES "users" (user_id), FOREIGN KEY (patient_id) REFERENCES "patients" (patient_id), FOREIGN KEY (role_id) REFERENCES "user_roles" (role_id));
CREATE TABLE care_plans (
                patient_name TEXT PRIMARY KEY,
                plan_details TEXT,
                updated_by TEXT,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
CREATE TABLE tasks_billing_codes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT NOT NULL UNIQUE,
                description TEXT
            );

-- Dashboard Summary Tables for Enhanced Dashboard Performance
CREATE TABLE IF NOT EXISTS "dashboard_provider_monthly_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    provider_id INTEGER NOT NULL,
    month INTEGER NOT NULL,
    year INTEGER NOT NULL,
    total_tasks_completed INTEGER DEFAULT 0,
    total_time_spent_minutes INTEGER DEFAULT 0,
    average_task_completion_time_minutes REAL DEFAULT 0.0,
    total_patients_served INTEGER DEFAULT 0,
    max_patients_allowed INTEGER DEFAULT 60,
    patients_assigned INTEGER DEFAULT 0,
    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id)
);

CREATE TABLE IF NOT EXISTS "dashboard_coordinator_monthly_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    coordinator_id INTEGER NOT NULL,
    month INTEGER NOT NULL,
    year INTEGER NOT NULL,
    total_minutes INTEGER DEFAULT 0,
    total_minutes_per_patient REAL DEFAULT 0.0,
    total_tasks_completed INTEGER DEFAULT 0,
    average_daily_tasks REAL DEFAULT 0.0,
    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (coordinator_id) REFERENCES "coordinators"(coordinator_id)
);

CREATE TABLE IF NOT EXISTS "dashboard_patient_assignment_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    patient_id INTEGER NOT NULL,
    patient_name TEXT,
    year INTEGER NOT NULL,
    month INTEGER NOT NULL,
    total_minutes INTEGER NOT NULL,
    billing_code_id INTEGER,
    billing_code TEXT,
    billing_code_description TEXT,
    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (billing_code_id) REFERENCES coordinator_billing_codes(code_id)
);
CREATE TABLE IF NOT EXISTS "user_patient_assignments" (user_id INTEGER NOT NULL, patient_id INTEGER NOT NULL, role_id INTEGER NOT NULL, PRIMARY KEY (user_id, patient_id, role_id), FOREIGN KEY (user_id) REFERENCES "users" (user_id), FOREIGN KEY (patient_id) REFERENCES "patients" (patient_id), FOREIGN KEY (role_id) REFERENCES "user_roles" (role_id));
CREATE TABLE care_plans (
                patient_name TEXT PRIMARY KEY,
                plan_details TEXT,
                updated_by TEXT,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
CREATE TABLE tasks_billing_codes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT NOT NULL UNIQUE,
                description TEXT
            );

-- Summary Tables for Enhanced Dashboard Performance
CREATE TABLE IF NOT EXISTS "provider_performance_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    provider_id INTEGER NOT NULL,
    month INTEGER NOT NULL,
    year INTEGER NOT NULL,
    total_tasks_completed INTEGER DEFAULT 0,
    total_time_spent_minutes INTEGER DEFAULT 0,
    average_task_completion_time_minutes REAL DEFAULT 0.0,
    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (provider_id) REFERENCES "providers"(provider_id)
);

CREATE TABLE IF NOT EXISTS "coordinator_performance_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    coordinator_id INTEGER NOT NULL,
    month INTEGER NOT NULL,
    year INTEGER NOT NULL,
    total_tasks_completed INTEGER DEFAULT 0,
    total_time_spent_minutes INTEGER DEFAULT 0,
    average_task_completion_time_minutes REAL DEFAULT 0.0,
    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (coordinator_id) REFERENCES "coordinators"(coordinator_id)
);

CREATE TABLE IF NOT EXISTS "patient_assignment_summary" (
    summary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    patient_id INTEGER NOT NULL,
